/**
 * Represents the sales report data.
 */
export interface SalesReport {
  /**
   * The name of the business.
   */
  businessName: string;
  /**
   * The logo of the business (as a URL or base64 encoded image).
   */
  logo: string;
  /**
   * The date when the report was generated.
   */
  reportDate: string;
  /**
   * The user who generated the report.
   */
  user: string;
  /**
   * The starting cash amount in the register.
   */
  startingCash: number;
  /**
   * The total sales amount.
   */
  totalSales: number;
  /**
   * The total sales amount from cash payments.
   */
  cashSales: number;
  /**
   * The total sales amount from card payments.
   */
  cardSales: number;
  /**
   * The expected cash amount in the register.
   */
  expectedCashInRegister: number;
  /**
   * The sales history data.
   */
  salesHistory: SalesHistoryItem[];
}

/**
 * Represents a single item in the sales history.
 */
export interface SalesHistoryItem {
  /**
   * The order number.
   */
  orderNumber: string;
  /**
   * The order ID.
   */
  orderId: string;
  /**
   * The customer's name.
   */
  customer: string;
  /**
   * The subtotal of the order.
   */
  subtotal: number;
  /**
   * The total amount of the order.
   */
  total: number;
  /**
   * The payment method used for the order.
   */
  paymentMethod: string;
  /**
   * The status of the order.
   */
  status: string;
}

/**
 * Asynchronously generates a PDF sales report.
 *
 * IMPORTANT: This function currently returns an empty PDF.
 * You need to implement the actual PDF generation logic using a library
 * like jsPDF, PDFKit (server-side), or a dedicated PDF service.
 *
 * @param reportData The data to include in the sales report.
 * @returns A promise that resolves to a PDF document as a byte array.
 */
export async function generateSalesReport(reportData: SalesReport): Promise<Uint8Array> {
  // TODO: Implement PDF generation using a library like jsPDF or PDFKit.
  // This is a stub, replace with actual PDF generation logic.

  console.log('--- Generating PDF Sales Report ---');
  console.log('Business Name:', reportData.businessName);
  console.log('Report Date:', reportData.reportDate);
  console.log('User:', reportData.user);
  console.log('-----------------------------------');
  console.log('Starting Cash:', reportData.startingCash);
  console.log('Total Sales:', reportData.totalSales);
  console.log('Cash Sales:', reportData.cashSales);
  console.log('Card Sales:', reportData.cardSales);
  console.log('Expected Cash:', reportData.expectedCashInRegister);
  console.log('-----------------------------------');
  console.log('Sales History:');

  console.log('\n--- Cash Payments ---');
  reportData.salesHistory
    .filter(item => item.paymentMethod === 'cash')
    .forEach(item => {
      console.log(`  #${item.orderNumber} (${item.orderId}) - ${item.customer} - Sub: ${item.subtotal} - Total: ${item.total} - ${item.status}`);
    });

   console.log('\n--- Card Payments ---');
    reportData.salesHistory
        .filter(item => item.paymentMethod === 'card')
        .forEach(item => {
            console.log(`  #${item.orderNumber} (${item.orderId}) - ${item.customer} - Sub: ${item.subtotal} - Total: ${item.total} - ${item.status}`);
        });

  console.log('-----------------------------------');
  console.warn('PDF Generation is not implemented. Returning empty PDF.');


  // Placeholder return value - Replace with actual PDF bytes
  return new Uint8Array();
}

/**
 * Example using jsPDF (Client-Side):
 *
 * import { jsPDF } from "jspdf";
 * import autoTable from 'jspdf-autotable'; // Needs npm install jspdf jspdf-autotable
 *
 * export async function generateSalesReport(reportData: SalesReport): Promise<Uint8Array> {
 *    const doc = new jsPDF();
 *    const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.getHeight();
 *    const pageWidth = doc.internal.pageSize.width || doc.internal.pageSize.getWidth();
 *    let currentY = 15; // Start position
 *
 *    // Header
 *    doc.setFontSize(18);
 *    doc.text(reportData.businessName, pageWidth / 2, currentY, { align: 'center' });
 *    currentY += 8;
 *    doc.setFontSize(10);
 *    doc.text(`Report Date: ${reportData.reportDate}`, pageWidth / 2, currentY, { align: 'center' });
 *    currentY += 5;
 *    doc.text(`Generated by: ${reportData.user}`, pageWidth / 2, currentY, { align: 'center' });
 *    currentY += 10;
 *
 *    // Summary Section
 *    doc.setFontSize(12);
 *    doc.text("Sales Summary", 14, currentY);
 *    currentY += 7;
 *    doc.setFontSize(10);
 *    doc.text(`Starting Cash: ${formatCurrency(reportData.startingCash)}`, 14, currentY);
 *    doc.text(`Total Sales: ${formatCurrency(reportData.totalSales)}`, pageWidth / 2, currentY);
 *    currentY += 5;
 *    doc.text(`Cash Sales: ${formatCurrency(reportData.cashSales)}`, 14, currentY);
 *    doc.text(`Card Sales: ${formatCurrency(reportData.cardSales)}`, pageWidth / 2, currentY);
 *    currentY += 5;
 *    doc.setFontSize(11).setFont(undefined, 'bold');
 *    doc.text(`Expected Cash in Register: ${formatCurrency(reportData.expectedCashInRegister)}`, 14, currentY);
 *    doc.setFont(undefined, 'normal');
 *    currentY += 10;
 *
 *    // Sales History Table (using jspdf-autotable)
 *    const head = [['#', 'ID', 'Customer', 'Subtotal', 'Total', 'Payment', 'Status']];
 *    const bodyCash = reportData.salesHistory
 *        .filter(item => item.paymentMethod === 'cash')
 *        .map(item => [
 *            item.orderNumber,
 *            item.orderId,
 *            item.customer,
 *            formatCurrency(item.subtotal),
 *            formatCurrency(item.total),
 *            item.paymentMethod,
 *            item.status
 *        ]);
 *
 *     const bodyCard = reportData.salesHistory
 *        .filter(item => item.paymentMethod === 'card')
 *        .map(item => [
 *             item.orderNumber,
 *            item.orderId,
 *            item.customer,
 *            formatCurrency(item.subtotal),
 *            formatCurrency(item.total),
 *            item.paymentMethod,
 *            item.status
 *        ]);
 *
 *      if (bodyCash.length > 0) {
 *          doc.setFontSize(12).text("Cash Payments", 14, currentY);
 *          currentY += 5;
 *          autoTable(doc, {
 *              head: head,
 *              body: bodyCash,
 *              startY: currentY,
 *              theme: 'grid',
 *              headStyles: { fillColor: [0, 128, 128] }, // Teal header
 *              didDrawPage: (data) => { currentY = data.cursor?.y || currentY; } // Update Y after table draw
 *          });
 *          currentY += 10; // Add space after table
 *       }
 *
 *        if (bodyCard.length > 0) {
 *          doc.setFontSize(12).text("Card Payments", 14, currentY);
 *          currentY += 5;
 *          autoTable(doc, {
 *              head: head,
 *              body: bodyCard,
 *              startY: currentY,
 *              theme: 'grid',
 *              headStyles: { fillColor: [0, 128, 128] }, // Teal header
 *              didDrawPage: (data) => { currentY = data.cursor?.y || currentY; }
 *          });
 *          currentY += 10;
 *        }
 *
 *
 *    // Return PDF bytes
 *    return doc.output('arraybuffer');
 * }
 *
 */
